name: docker
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*"

jobs:
  docker:
    runs-on: ${{ matrix.arch.runner }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - platform: arm64
            runner: [ self-hosted, Linux, ARM64 ]
          - platform: amd64
            runner: ubuntu-latest
    outputs:
      image_prefix: ${{ steps.image-prefix.outputs.tag_prefix }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.API_TOKEN_GITHUB }}

      # This is necessary on self-hosted runners
      - name: Create build context
        run: |
          docker context inspect builder || docker context create builder

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder

      - name: Determine PR branch
        id: pr_branch
        run: |
          docker_branch_name=$(echo ${{github.head_ref || github.ref_name}} | sed 's#/#-#')
          echo "docker_branch_name=${docker_branch_name}" >> ${GITHUB_OUTPUT}

      # Note: This metadata action must be kept in sync with the one below
      - name: Docker meta
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/timescale/timescaledb-backfill
          flavor: |
            latest=false
            suffix=-${{ matrix.arch.platform }}
          tags: |
            type=edge
            type=raw,value=${{ steps.pr_branch.outputs.docker_branch_name }},enable=${{ github.event_name == 'pull_request' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Determine image tag prefix
        id: image-prefix
        run: |
          tag=${{ fromJson(steps.metadata.outputs.json).tags[0] }}
          arch=${{ matrix.arch.platform }}
          tag_prefix=${tag%"-$arch"}
          echo "tag_prefix=${tag_prefix}" >> ${GITHUB_OUTPUT}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: ${{matrix.arch.platform}}
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=timescaledb-backfill-${{ matrix.arch.platform }}
          cache-to: type=gha,mode=max,scope=timescaledb-backfill-${{ matrix.arch.platform }}

  docker-integration:
    name: Run integration tests against docker images
    needs: docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # limiting concurrency as the tests are docker-heavy
      max-parallel: 1
      matrix:
        arch:
          - platform: amd64
            threads: 4
          - platform: arm64
            threads: 1
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.API_TOKEN_GITHUB }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.68.0
          components: clippy, rustfmt

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Compile tests
        run: cargo test --no-run

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ matrix.arch.platform == 'arm64' }}

      - name: Integration tests
        env:
          USE_DOCKER: true
          DOCKER_IMAGE: ${{ needs.docker.outputs.image_prefix }}-${{ matrix.arch.platform }}
          DOCKER_PLATFORM: linux/${{ matrix.arch.platform }}
        # Restrict to integration tests only. 
        # limiting concurrency as the tests are docker-heavy
        run: cargo test --test '*' -- --test-threads=${{ matrix.arch.threads }}

  # This allows us to set a single job which must pass in GitHub's branch protection rules.
  docker-result:
    name: docker result
    if: always()
    needs:
      - docker
      - docker-integration
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.docker.result == 'success' && needs.docker-integration.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.docker.result != 'success' || needs.docker-integration.result != 'success'
        run: exit 1

  docker-multi-arch-manifest:
    # Note: This is what happens when the world conspires against you.
    #
    # Technically, building the image would be as simple as setting:
    # `platforms: linux/amd64, linux/arm64`. Unfortunately this relies on QEMU
    # which is much like molasses in its speed. For Rust builds untenable.
    #
    # Instead, we want to use our fancy arm64 runner. This means that we must
    # build the arm64 and amd64 images separately, and then afterwards combine
    # them.
    #
    # The above job builds the images separately in parallel, pushing them to
    # a private ghcr registry.
    #
    # This job creates the new manifest for public consumption composed of the
    # two pieces.
    name: docker multi-arch manifest
    needs:
      - docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      # Note: This metadata action must be kept in sync with the one above
      - name: Docker meta
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            timescale/timescaledb-backfill
          flavor: |
            latest=false
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ORG_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create and push multi-arch manifests
        run: |
          for tag in ${{ join(fromJSON(steps.metadata.outputs.json).tags, ' ') }}; do
            docker buildx imagetools create -t ${tag} "ghcr.io/${tag}-arm64" "ghcr.io/${tag}-amd64"
          done
        shell: bash -x {0}
