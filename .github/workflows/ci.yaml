name: CI
on:
  # Build all branches, ignore all tags.
  push:
    branches:
      - "**"
    tags-ignore:
      - "*"

concurrency:
  group: ci-${{ github.ref }}-1
  cancel-in-progress: true

env:
  # force cargo to use the git cli. Combined with the "https with PAT" path
  # rewriting, this allows CI to check out private git repos with low hassle.
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.filter.outputs.files }}
    steps:
      - name: Setup | Checkout submodules
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            files:
              - Cargo.toml
              - '**.rs'
              - '**.sql'
              - .cargo/config.toml
              - .github/workflows/ci.yaml

  lint:
    name: Lint

    needs: changes
    if: ${{ needs.changes.outputs.files == 'true' }}

    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      # Note: this wizardry allows git dependencies to be specified as ssh:// uris in Cargo.toml, but
      # be checked out with our ORG_AUTOMATION_TOKEN PAT. Thank god for stackoverflow.
      - name: Setup git PAT override
        run: |
          git config --global --add url."https://${{ secrets.ORG_AUTOMATION_TOKEN }}:@github".insteadOf ssh://git@github

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.72.0
          targets: x86_64-unknown-linux-musl
          components: clippy, rustfmt

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Cargo | Rustfmt
        run: cargo fmt -- --check

      - name: Lint
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test

    needs: changes
    if: ${{ needs.changes.outputs.files == 'true' }}

    strategy:
      fail-fast: false
      matrix:
        pgversion: [17]
        tsversion: ["2.17", "2.18", "2.19", "2.20", "2.21"]

    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      # Note: this wizardry allows git dependencies to be specified as ssh:// uris in Cargo.toml, but
      # be checked out with our ORG_AUTOMATION_TOKEN PAT. Thank god for stackoverflow.
      - name: Setup git PAT override
        run: |
          git config --global --add url."https://${{ secrets.ORG_AUTOMATION_TOKEN }}:@github".insteadOf ssh://git@github

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.72.0
          targets: x86_64-unknown-linux-musl
          components: clippy, rustfmt

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      # This is required for the integration tests. If we move them to their
      # own action we can remove it.
      - name: Install PG17
        run: |
          sudo apt-get --purge remove postgresql-16 postgresql-client-16 -y
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
          sudo apt update
          sudo apt install postgresql-17 postgresql-client-17 -y
          psql --version
          pg_dump --version

      - name: Test
        run: cargo test --workspace
        env:
          BF_TEST_PG_VERSION: ${{ matrix.pgversion }}
          BF_TEST_TS_VERSION: ${{ matrix.tsversion }}

  # This allows us to set a single job which must pass in GitHub's branch protection rules.
  ci-result:
    name: ci result
    if: always()
    needs:
      - changes
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.changes.outputs.files == 'false' || (needs.lint.result == 'success' && needs.test.result == 'success')
        run: exit 0
      - name: Mark the job as a failure
        if: needs.changes.outputs.files == 'true' && (needs.lint.result != 'success' || needs.test.result != 'success')
        run: exit 1
